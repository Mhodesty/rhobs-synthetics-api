openapi: 3.1.1
info:
  title: RHOBS Synthetics Probes API
  version: 0.0.1
  description: API for managing Blackbox Probes
tags:
  - name: probes
    description: Operations related to metrics probes
paths:
  /metrics/probes:
    get:
      summary: Get a list of all configured probes
      operationId: listProbes
      tags:
        - probes
      parameters:
        - $ref: '#/components/parameters/LabelSelectorQueryParam'
      responses:
        '200':
          description: A list of all configured probes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbesArrayResponse'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Creates a new probe
      operationId: createProbe
      tags:
        - probes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProbeRequest'
      responses:
        '201':
          description: Probe created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbeObject' # Return single created object
        '409':
          description: A probe with the same static_url already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /metrics/probes/{probe_id}:
    get:
      summary: Get a probe by its ID
      operationId: getProbeById
      tags:
        - probes
      parameters:
        - $ref: '#/components/parameters/ProbeIdPathParam'
      responses:
        "200":
          description: Configured probe matching the provided ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProbeObject"
        "404":
          description: Probe not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarningResponse"
    patch:
      summary: Updates a probe by its ID
      operationId: updateProbe
      tags:
        - probes
      parameters:
        - $ref: '#/components/parameters/ProbeIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProbeRequest'
      responses:
        "200":
          description: Probe updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProbeObject"
        "404":
          description: Probe not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarningResponse"
        "400":
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Deletes a probe matching provided ID
      operationId: deleteProbe
      tags:
        - probes
      parameters:
        - $ref: '#/components/parameters/ProbeIdPathParam'
      responses:
        '204':
          description: Probe deleted successfully. No content.
        '404':
          description: Probe not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarningResponse'

components:
  parameters:
    ProbeIdPathParam:
      name: probe_id
      in: path
      required: true
      description: The ID of the probe to retrieve.
      schema:
        $ref: '#/components/schemas/ProbeIdSchema'
      example: d290f1ee-6c54-4b01-90e6-d701748f0851
    LabelSelectorQueryParam:
        name: label_selector
        in: query
        description: A comma-separated list of key=value labels to filter on.
        schema:
          type: string
        example: "cluster_id=d290f1ee-6c54-4b01-90e6-d701748f0851,private=true"

  schemas:
    ProbeIdSchema:
      type: string
      format: uuid
      description: The unique identifier of a probe (UUID format).
      example: d290f1ee-6c54-4b01-90e6-d701748f0851

    StaticUrlSchema:
      type: string
      format: url
      description: The static URL to be probed.
      example: https://api.example-cluster.foo.devshift.org

    LabelsSchema:
      type: object
      description: A set of key-value pairs that can be used to organize and select probes.
      additionalProperties:
        type: string
      example:
        cluster_id: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        private: "true"

    ProbeObject:
      type: object
      description: Represents a single probe configuration.
      properties:
        id:
          $ref: '#/components/schemas/ProbeIdSchema'
        static_url:
          $ref: '#/components/schemas/StaticUrlSchema'
        labels:
          $ref: '#/components/schemas/LabelsSchema'
      required:
        - id
        - static_url

    ProbesArrayResponse:
      type: object
      properties:
        probes:
          type: array
          items:
            $ref: '#/components/schemas/ProbeObject'
          description: Array containing one or more probe objects.
      required:
        - probes

    CreateProbeRequest:
      type: object
      properties:
        static_url:
          $ref: '#/components/schemas/StaticUrlSchema'
        labels:
          $ref: '#/components/schemas/LabelsSchema'
      required:
        - static_url

    ErrorObject:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
          example: 'Invalid label selector format'
      required:
        - message

    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      required:
        - error

    WarningObject:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message indicating the resource was not found.
          example: "Probe with ID 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' not found"
      required:
        - message

    WarningResponse:
      type: object
      properties:
        warning:
          $ref: '#/components/schemas/WarningObject'
      required:
        - warning
