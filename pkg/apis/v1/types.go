//go:build go1.22

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateProbeRequest defines model for CreateProbeRequest.
type CreateProbeRequest struct {
	// Labels A set of key-value pairs that can be used to organize and select probes.
	Labels *LabelsSchema `json:"labels,omitempty"`

	// StaticUrl The static URL to be probed.
	StaticUrl StaticUrlSchema `json:"static_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *struct {
		// Code HTTP status code.
		Code *int32 `json:"code,omitempty"`

		// Message A human-readable error message.
		Message *string `json:"message,omitempty"`
	} `json:"error,omitempty"`
}

// LabelsSchema A set of key-value pairs that can be used to organize and select probes.
type LabelsSchema map[string]string

// ProbeIdSchema The unique identifier of a probe (UUID format).
type ProbeIdSchema = openapi_types.UUID

// ProbeObject Represents a single probe configuration.
type ProbeObject struct {
	// Id The unique identifier of a probe (UUID format).
	Id ProbeIdSchema `json:"id"`

	// Labels A set of key-value pairs that can be used to organize and select probes.
	Labels *LabelsSchema `json:"labels,omitempty"`

	// StaticUrl The static URL to be probed.
	StaticUrl StaticUrlSchema `json:"static_url"`
}

// ProbesArrayResponse defines model for ProbesArrayResponse.
type ProbesArrayResponse struct {
	// Probes Array containing one or more probe objects.
	Probes []ProbeObject `json:"probes"`
}

// StaticUrlSchema The static URL to be probed.
type StaticUrlSchema = string

// LabelSelectorQueryParam defines model for LabelSelectorQueryParam.
type LabelSelectorQueryParam = string

// ProbeIdPathParam The unique identifier of a probe (UUID format).
type ProbeIdPathParam = ProbeIdSchema

// ListProbesParams defines parameters for ListProbes.
type ListProbesParams struct {
	// LabelSelector A comma-separated list of key=value labels to filter on.
	LabelSelector *LabelSelectorQueryParam `form:"label_selector,omitempty" json:"label_selector,omitempty"`
}

// CreateProbeJSONRequestBody defines body for CreateProbe for application/json ContentType.
type CreateProbeJSONRequestBody = CreateProbeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all configured probes
	// (GET /metrics/probes)
	ListProbes(w http.ResponseWriter, r *http.Request, params ListProbesParams)
	// Creates a new probe
	// (POST /metrics/probes)
	CreateProbe(w http.ResponseWriter, r *http.Request)
	// Deletes a probe matching provided ID
	// (DELETE /metrics/probes/{probe_id})
	DeleteProbe(w http.ResponseWriter, r *http.Request, probeId ProbeIdPathParam)
	// Get a probe by its ID
	// (GET /metrics/probes/{probe_id})
	GetProbeById(w http.ResponseWriter, r *http.Request, probeId ProbeIdPathParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListProbes operation middleware
func (siw *ServerInterfaceWrapper) ListProbes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProbesParams

	// ------------- Optional query parameter "label_selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "label_selector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label_selector", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProbes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProbe operation middleware
func (siw *ServerInterfaceWrapper) CreateProbe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProbe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProbe operation middleware
func (siw *ServerInterfaceWrapper) DeleteProbe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "probe_id" -------------
	var probeId ProbeIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "probe_id", r.PathValue("probe_id"), &probeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "probe_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProbe(w, r, probeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbeById operation middleware
func (siw *ServerInterfaceWrapper) GetProbeById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "probe_id" -------------
	var probeId ProbeIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "probe_id", r.PathValue("probe_id"), &probeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "probe_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbeById(w, r, probeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/metrics/probes", wrapper.ListProbes)
	m.HandleFunc("POST "+options.BaseURL+"/metrics/probes", wrapper.CreateProbe)
	m.HandleFunc("DELETE "+options.BaseURL+"/metrics/probes/{probe_id}", wrapper.DeleteProbe)
	m.HandleFunc("GET "+options.BaseURL+"/metrics/probes/{probe_id}", wrapper.GetProbeById)

	return m
}

type ListProbesRequestObject struct {
	Params ListProbesParams
}

type ListProbesResponseObject interface {
	VisitListProbesResponse(w http.ResponseWriter) error
}

type ListProbes200JSONResponse ProbesArrayResponse

func (response ListProbes200JSONResponse) VisitListProbesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProbes400JSONResponse ErrorResponse

func (response ListProbes400JSONResponse) VisitListProbesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProbeRequestObject struct {
	Body *CreateProbeJSONRequestBody
}

type CreateProbeResponseObject interface {
	VisitCreateProbeResponse(w http.ResponseWriter) error
}

type CreateProbe201JSONResponse ProbeObject

func (response CreateProbe201JSONResponse) VisitCreateProbeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProbe409JSONResponse ErrorResponse

func (response CreateProbe409JSONResponse) VisitCreateProbeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateProbe500JSONResponse ErrorResponse

func (response CreateProbe500JSONResponse) VisitCreateProbeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProbeRequestObject struct {
	ProbeId ProbeIdPathParam `json:"probe_id"`
}

type DeleteProbeResponseObject interface {
	VisitDeleteProbeResponse(w http.ResponseWriter) error
}

type DeleteProbe204Response struct {
}

func (response DeleteProbe204Response) VisitDeleteProbeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProbe404JSONResponse ErrorResponse

func (response DeleteProbe404JSONResponse) VisitDeleteProbeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProbeByIdRequestObject struct {
	ProbeId ProbeIdPathParam `json:"probe_id"`
}

type GetProbeByIdResponseObject interface {
	VisitGetProbeByIdResponse(w http.ResponseWriter) error
}

type GetProbeById200JSONResponse ProbeObject

func (response GetProbeById200JSONResponse) VisitGetProbeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbeById404JSONResponse ErrorResponse

func (response GetProbeById404JSONResponse) VisitGetProbeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a list of all configured probes
	// (GET /metrics/probes)
	ListProbes(ctx context.Context, request ListProbesRequestObject) (ListProbesResponseObject, error)
	// Creates a new probe
	// (POST /metrics/probes)
	CreateProbe(ctx context.Context, request CreateProbeRequestObject) (CreateProbeResponseObject, error)
	// Deletes a probe matching provided ID
	// (DELETE /metrics/probes/{probe_id})
	DeleteProbe(ctx context.Context, request DeleteProbeRequestObject) (DeleteProbeResponseObject, error)
	// Get a probe by its ID
	// (GET /metrics/probes/{probe_id})
	GetProbeById(ctx context.Context, request GetProbeByIdRequestObject) (GetProbeByIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListProbes operation middleware
func (sh *strictHandler) ListProbes(w http.ResponseWriter, r *http.Request, params ListProbesParams) {
	var request ListProbesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProbes(ctx, request.(ListProbesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProbes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProbesResponseObject); ok {
		if err := validResponse.VisitListProbesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProbe operation middleware
func (sh *strictHandler) CreateProbe(w http.ResponseWriter, r *http.Request) {
	var request CreateProbeRequestObject

	var body CreateProbeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProbe(ctx, request.(CreateProbeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProbe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProbeResponseObject); ok {
		if err := validResponse.VisitCreateProbeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProbe operation middleware
func (sh *strictHandler) DeleteProbe(w http.ResponseWriter, r *http.Request, probeId ProbeIdPathParam) {
	var request DeleteProbeRequestObject

	request.ProbeId = probeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProbe(ctx, request.(DeleteProbeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProbe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProbeResponseObject); ok {
		if err := validResponse.VisitDeleteProbeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbeById operation middleware
func (sh *strictHandler) GetProbeById(w http.ResponseWriter, r *http.Request, probeId ProbeIdPathParam) {
	var request GetProbeByIdRequestObject

	request.ProbeId = probeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbeById(ctx, request.(GetProbeByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbeById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbeByIdResponseObject); ok {
		if err := validResponse.VisitGetProbeByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX247bNhD9FYLtQwvIt8S5GcjDbrZIDARddzf7FAQLWhxZTChSS46cuIb+vRhS8k3a",
	"JinSbR8tjckzZ86ZGW15aovSGjDo+WzLS+FEAQgu/HorlqCvQUOK1v1Rgdss6D29kuBTp0pU1vAZP2Op",
	"LQox8EAHIEimlUdmM/YJNi/XQlfANB3mGVqWKY3gmDVDnnD4IopSA5/xVFcewd0q+VI+ejHOJgCDp+mT",
	"6WC6HE8GL8bwdCCfjSfPps+z8fMnk6R0ai0QXqKrgCdcEZA7AskTbkRBR4Y7b32TAU+4T3MoBCWAm5Ii",
	"PDplVryuE75wdglzuRCY35PmuxzY/ILSwhxYSfGUjwN0CtZwnM635NDCLgXme9Th4FslecId3FXKgeQz",
	"yvIQ/88OMj7jP432BRzFt37UZHIdg2tKrnlF/3zlQCCEmCu4q8BjqLyzJThUEGJisb52T9CHb69JuEeB",
	"Kr2tnP7aP69D5I3TO4yHub4/POlD0tbKLj9CinTRb85ZdwW+tMZDFz3Q6+7j1EroFvXNu3cLRvdVnlHE",
	"URWn43HCM+sKgXzGlcHHj/gOjzIIK3AEqADvxQr6nJFXhTADB0KKpQYWsLEm/lgxc7MWWsnoFNaqljXX",
	"Jz2SPSGm7qHqqEazLRdSKsIm9OKInJPDk04eHlpDD6KhS6GcZ5gLZKkwbAms8iDJENathFF/AhNGNnlE",
	"t/ijhLcHlv92wzS25zMejN+X87H+e21cGXVXAVMSDKpMUTvKmGg8/cvNzfyi4f3Xf+TqnWSqKvi4w26A",
	"eBkRdwBeQenAk2GYYF6ZlW67TWpNplaVExQ5DGwcFpF4/K7WkPznTg/0fMXuAbQ/c05s7jd9FFiPA+lv",
	"RBwKZZRZMWuAkQWta1mNNwVxKoTCfxOJlzt4DV5BF3Xya2D1pXVKTa9QIzXs5uotOWvZQJbHqswRSz8b",
	"jUSphs3TQeOtYWbtUMLa5yrDoXWrI3U63dNXappKme2hcjEnV7BCGLEiKs+1SD8t7RcWK0RnKQyIrt5c",
	"nl+z643BHFClvolgZ4s5T/ganI9Hjofj4YTIsCUYUSo+44+Hk2EwusA8lGJU0IBN/Whf4hUE21D9gxXm",
	"1EDeKo87IIebzPv+cu5DRvdtOvUHqmaUXLj40XgcR4lBMAGDKEut0oBi9NFTUtvvGdMnsg7sn7bedpkS",
	"Wu86AMhdS60TPv2BsI6Haw+gdk65uD2wPY/DIH9fFYVwGz7jrwGZ+Hv4pBmx8odWqRNeWt9T4IPNpdmN",
	"wOO5lZsflnvPblQfO5qGTt0RxeTHiqLtLV3uF3EMBJiS+SpNwfus0nrT6ODFw+ngrGmfnxXmYSP2omgb",
	"FvVyJjStPRsGX5THKNQnDytUBGcE7VJuDS7uXqcajSWnSWvgc8yoT5N1ctqHRtt2Ua9jq9SA0BXtRXje",
	"ivb72lLnk6SnH027fTqKJAI6EQn73bKG/EYw04erR8RlLLLMVkaeViIy5XdrWCEwzWnMlM6ulQTJ5hf9",
	"7aJ3HLyGOA3ON3P5rzA/fijTvzppmntmmu/Qlp3/XUnjAIiglxum0N9Tw/DtEh+eqvmyrapnDnToe2hZ",
	"48X9FDn8ePa8/lD/FQAA//8Nf/Gi3BAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
